#############################
## Unattended Upgrades Play##
#############################
---
- name: Set Timezone play + 2 roles (testing)
  hosts: raw
  roles:
  - smtp-setup
  - unattended-upgrades
  tasks:
# Set time to current timezone - ntp server is not required
    - name: Set timezone to {{ vars.time_zone }}
      community.general.timezone:
        name: "{{ vars.time_zone }}"

  vars_files:
    - ./vars/vars.yml

##################
## Security Play##
##################

- name: Security play
  hosts: raw
  tasks:
# Notify via mail on SSH login 
# - upload .sh file
# - add line to /etc/pam.d/sshd
    - name: Upload shell script for SSH login notification
      template:
        src: ssh_notify.j2
        dest: /etc/ssh/login_notify.sh
        owner: root
        group: root
        mode: 0700

# Too spammy during testing, disabled for now
    - name: Modify sshd file to trigger SSH login notification script
      lineinfile:
        regexp: "^(#)?session optional pam_exec.so seteuid /etc/ssh/login_notify.sh"
        line: "session optional pam_exec.so seteuid /etc/ssh/login_notify.sh"
        state: present
        dest: /etc/pam.d/sshd
      notify:
      - restart sshd

# "Security" play
    - name: Firewalld set SSH port {{ vars.ssh_port }} with rate limiting
      firewalld:
        rich_rule: "rule family='ipv4' port port='{{ vars.ssh_port }}' protocol='tcp' accept limit value='5/m'"
        permanent: yes
        immediate: yes
        state: enabled
    
# Maybe instead of having this option, the previous one should upload a .j2 template with ssh service modified
    - name: Ensure default ssh service is disabled
      firewalld:
        service: ssh
        permanent: yes
        immediate: yes
        state: disabled

    - name: Firewalld set Jamulus port enabled
      firewalld:
        port: "22124/udp"
        permanent: yes
        immediate: yes
        state: enabled


  vars_files:
    - ./vars/vars.yml

  handlers:
    - name: restart sshd
      service:
        name: sshd
        state: restarted


#######################
## Jamulus setup Play##
#######################

- name: Jamulus Setup play
  hosts: raw
  tasks:
    - name: Ensure Jamulus dependencies are installed
      apt: 
        pkg:
          - build-essential 
          - qt5-qmake 
          - qtdeclarative5-dev
          - qttools5-dev-tools
        state: present
        update_cache: yes
    
    - name: Create jamulus user
      ansible.builtin.user:
        name: jamulus
        state: present
        create_home: no
        system: yes

# This will check if Jamulus is installed
    - name: Check if Jamulus is already installed
      shell: command -v /usr/local/bin/Jamulus
      register: jamuluscheck
      # Ignore errors works fine, but it should ideally supress this output as we don't care if it errors out
      ignore_errors: true

    - name: Extract {{ vars.jamulus_archive_path }} into home directory of the ansible user
      ansible.builtin.unarchive:
        src: "{{ vars.jamulus_archive_path }}"
        dest: /home/{{ ansible_user }}
      when: jamuluscheck.rc > 0
    
    # Here's where we make and install Jamulus (to be done later)
    - name: Install Jamulus on the server
      shell: bash -lc "cd /home/{{ ansible_user }}/jamulus-latest && qmake 'CONFIG+=nosound headless' Jamulus.pro && make clean && make && make install"
      when: jamuluscheck.rc > 0

    - name: Systemd unit file for Jamulus
      template:
        src: systemd-unit.j2
        dest: /etc/systemd/system/jamulus.service
        owner: root
        group: root
        mode: 0644
      notify:
        - start enable jamulus

  handlers:
    - name: start enable jamulus
      service:
        name: jamulus
        state: restarted
        enabled: yes


  vars_files:
    - ./vars/vars.yml

